{"version":3,"sources":["pages/Home/styles.js","functions/graph.js","pages/Home/index.js","routes.js","styles/global.js","App.js","index.js"],"names":["Container","styled","div","Header","Body","Menu","darken","Text","p","SubText","SubTextInstructions","Conditional","Bottom","FormContainer","Input","input","Graph","this","vertexs","memoization","totalNodes","sucessor","solutionSet","id","vertex","neighbors","degree","origin","destiny","type","weight","new_edge","new_inverse_edge","addVertex","addEdge","nodes","edges","new_node","label","title","edge","push","from","to","toString","color","dict","total","console","log","i","Number","MAX_SAFE_INTEGER","aux","hasOwnProperty","path","response","cost","Home","useState","renderizedGraph","setRenderizedGraph","setTotalNodes","destinyInput","setDestinyInput","setVertexs","setClickedVertex","setPath","setCost","example","setExample","applied","setApplied","graph","GraphStructure","events","select","event","shortestPath","alert","renderized","renderGraph","length","j","setTimeout","drawPath","exampleOne","exampleTwo","onClick","target","value","required","onChange","placeholder","index","new_renderized","currentNode","e","options","Routes","exact","component","createGlobalStyle","App","basename","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1a8024b.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { darken } from \"polished\";\nexport const Container = styled.div`\n  height: 100%;\n  background: linear-gradient(-90deg, #fff, #000);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const Header = styled.div`\n  height: 10%;\n  width: 100%;\n  flex-direction: column;\n  vertical-align: middle;\n  background: #000;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n`;\nexport const Body = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n`;\nexport const Menu = styled.div`\n  height: 100%;\n  width: 20%;\n  display: flex;\n  background: #000;\n  align-items: center;\n  flex-direction: column;\n  button {\n    margin: 15px;\n    padding: 10px;\n    height: 8%;\n    width: 60%;\n    background: linear-gradient(-90deg, #fff, #000);\n    font-weight: bold;\n    color: #fff;\n    border: 0;\n    border-radius: 4px;\n    font-size: 16px;\n    transition: background 0.2s;\n    &:hover {\n      background: ${darken(0.03, \"#3b9eff\")};\n    }\n  }\n  textAlign = center;\n`;\nexport const Text = styled.p`\n  font-size: 30px;\n  color: #fff;\n  text-align: center;\n`;\nexport const SubText = styled.p`\n  font-size: 30px;\n  color: #ff0;\n  text-align: center;\n`;\nexport const SubTextInstructions = styled.p`\n  margin-top: 15px;\n  font-size: 20px;\n  color: #ff0000;\n  text-align: center;\n`;\nexport const Conditional = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Bottom = styled.div`\n  height: 10%;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  background: #000;\n  display: flex;\n`;\n\nexport const FormContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  form {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n    button {\n      margin: 15px;\n      padding: 10px;\n      height: 8%;\n      width: 60%;\n      background: linear-gradient(-90deg, #fff, #000);\n      font-weight: bold;\n      color: #fff;\n      border: 0;\n      border-radius: 4px;\n      font-size: 16px;\n      transition: background 0.2s;\n      &:hover {\n        background: ${darken(0.03, \"#3b9eff\")};\n      }\n    }\n`;\n\nexport const Input = styled.input`\n  background: rgba(0, 0, 0, 0.1);\n  border: 1;\n  border-color: #fff;\n  border-radius: 4px;\n  height: 35px;\n  padding: 0 15px;\n  color: #fff;\n  margin: 0 0 10px;\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n  }\n`;\n","export default class Graph {\n  constructor() {\n    this.vertexs = {}; // implementado assim para poder achar qualquer nó em O(1) (passando o id)\n    this.memoization = {};\n    this.totalNodes = 0;\n    this.sucessor = {};\n    this.solutionSet = {};\n  }\n\n  // adição de um vertice 'id' no grafo\n  addVertex(id) {\n    let vertex = {\n      id: id,\n      neighbors: {}, // implementado assim para poder achar qualquer nó vizinho em O(1) (passando o id)\n      degree: 0,\n    };\n\n    this.vertexs[id] = vertex;\n    this.totalNodes++;\n  }\n\n  // OBS: parametro 'type' opcional (se nao for passado ele considera uma aresta orientada (a->c))\n  // se for passado o valor 'undirected' em 'type', ele alem de fazer a aresta (a->c) ele faz a aresta (c->a)\n  addEdge(origin, destiny, type, weight) {\n    let new_edge = {\n      origin: origin,\n      destiny: destiny,\n      weight: weight,\n    };\n    this.vertexs[origin][\"neighbors\"][destiny] = new_edge;\n    this.vertexs[origin][\"degree\"]++;\n\n    if (type === \"undirected\") {\n      let new_inverse_edge = {\n        origin: destiny,\n        destiny: origin,\n        weight: weight,\n      };\n\n      this.vertexs[destiny][\"neighbors\"][origin] = new_inverse_edge;\n      this.vertexs[destiny][\"degree\"]++;\n    }\n  }\n\n  test() {\n    this.addVertex(\"s\");\n    this.addVertex(\"2\");\n    this.addVertex(\"3\");\n    this.addVertex(\"4\");\n  }\n  exampleOne() {\n    this.vertexs = {};\n    this.memoization = {};\n    this.totalNodes = 0;\n    this.sucessor = {};\n    this.solutionSet = {};\n\n    this.addVertex(\"s\");\n    this.addVertex(\"2\");\n    this.addVertex(\"3\");\n    this.addVertex(\"4\");\n    this.addVertex(\"5\");\n    this.addVertex(\"6\");\n    this.addVertex(\"7\");\n    this.addVertex(\"t\");\n\n    this.addEdge(\"s\", \"2\", null, 9);\n    this.addEdge(\"s\", \"6\", null, 6);\n    this.addEdge(\"s\", \"7\", null, 15);\n    this.addEdge(\"2\", \"3\", null, 10);\n    this.addEdge(\"3\", \"5\", null, -16);\n    this.addEdge(\"3\", \"t\", null, 19);\n    this.addEdge(\"4\", \"3\", null, 6);\n    this.addEdge(\"4\", \"t\", null, 6);\n    this.addEdge(\"5\", \"4\", null, 11);\n    this.addEdge(\"5\", \"t\", null, 16);\n    this.addEdge(\"6\", \"3\", null, 18);\n    this.addEdge(\"6\", \"5\", null, 30);\n    this.addEdge(\"6\", \"7\", null, -8);\n    this.addEdge(\"7\", \"5\", null, 20);\n    this.addEdge(\"7\", \"t\", null, 44);\n\n    let nodes = [];\n    let edges = [];\n\n    for (let vertex in this.vertexs) {\n      let new_node = {\n        id: vertex,\n        label: vertex,\n        title: \"node 1\",\n      };\n      nodes.push(new_node);\n\n      for (let edge in this.vertexs[vertex].neighbors) {\n        // console.log(this.vertexs[vertex].neighbors[edge].weight);\n        // console.log(\"edge aqui -> \", edge);\n        let new_edge = {\n          from: this.vertexs[vertex].neighbors[edge].origin,\n          to: this.vertexs[vertex].neighbors[edge].destiny,\n          label: this.vertexs[vertex].neighbors[edge].weight.toString(),\n          color: \"#FF0\",\n        };\n        edges.push(new_edge);\n      }\n    }\n\n    let dict = {\n      nodes: nodes,\n      edges: edges,\n    };\n    // console.log(this.vertexs);\n\n    return { dict: dict, vertexs: this.vertexs, total: this.totalNodes };\n  }\n\n  exampleTwo() {\n    this.vertexs = {};\n    this.memoization = {};\n    this.totalNodes = 0;\n    this.sucessor = {};\n    this.solutionSet = {};\n    this.addVertex(\"A\");\n    this.addVertex(\"B\");\n    this.addVertex(\"C\");\n    this.addVertex(\"D\");\n    this.addVertex(\"E\");\n    this.addEdge(\"A\", \"B\", null, -1);\n    this.addEdge(\"A\", \"C\", null, 4);\n    this.addEdge(\"B\", \"C\", null, 3);\n    this.addEdge(\"B\", \"D\", null, 2);\n    this.addEdge(\"B\", \"E\", null, 2);\n    this.addEdge(\"D\", \"B\", null, 1);\n    this.addEdge(\"D\", \"C\", null, 5);\n    this.addEdge(\"E\", \"D\", null, -3);\n\n    let nodes = [];\n    let edges = [];\n\n    for (let vertex in this.vertexs) {\n      let new_node = {\n        id: vertex,\n        label: vertex,\n        title: \"node 1\",\n      };\n      nodes.push(new_node);\n\n      for (let edge in this.vertexs[vertex].neighbors) {\n        let new_edge = {\n          from: this.vertexs[vertex].neighbors[edge].origin,\n          to: this.vertexs[vertex].neighbors[edge].destiny,\n          label: this.vertexs[vertex].neighbors[edge].weight.toString(),\n          color: \"#FF0\",\n        };\n        edges.push(new_edge);\n      }\n    }\n\n    let dict = {\n      nodes: nodes,\n      edges: edges,\n    };\n\n    return { dict: dict, vertexs: this.vertexs, total: this.totalNodes };\n  }\n\n  shortestPath(origin, destiny) {\n    console.log(this.vertexs);\n    // iniciar com infinito e zerar somente a coluna do nó destiny\n\n    for (let i = 0; i < this.totalNodes; ++i) {\n      this.memoization[i] = {}; // criando objeto para cada iteração\n      for (let vertex in this.vertexs) {\n        this.memoization[i][vertex] = Number.MAX_SAFE_INTEGER; // recebendo valor \"infinito\"\n      }\n      this.memoization[i][destiny] = 0; // zerando a coluna do nó procurado, pois para chegar a ele precisamos de 0 arestas.\n    }\n\n    // loops para verificar os menores caminhos (logica do algoritmo)\n\n    // ----------------------------------------------------------- //\n    for (let i = 1; i <= this.totalNodes - 1; ++i) {\n      for (let vertex in this.vertexs) {\n        this.memoization[i][vertex] = this.memoization[i - 1][vertex]; // o valor atual recebe o mesmo valor da coluna acima\n        // para cada vizinho do nó\n        for (let edge in this.vertexs[vertex].neighbors) {\n          // o if abaixo verifica se os 2 valores sao infinitos, se sim, vai pra proxima iteração.\n          if (\n            this.memoization[i][vertex] === Number.MAX_SAFE_INTEGER &&\n            this.memoization[i - 1][edge] === Number.MAX_SAFE_INTEGER\n          ) {\n            continue;\n          }\n          // o if abaixo verifica se o valor atual e maior que o valor do vizinho na linha de cima + o peso desse vizinho\n          if (\n            this.memoization[i][vertex] >\n            this.memoization[i - 1][edge] +\n              this.vertexs[vertex].neighbors[edge].weight\n          ) {\n            //se sim faz o swap, e adiciona o sucessor.\n            this.memoization[i][vertex] =\n              this.memoization[i - 1][edge] +\n              this.vertexs[vertex].neighbors[edge].weight;\n            this.sucessor[vertex] = edge;\n          }\n        }\n      }\n    }\n    // ----------------------------------------------------------- //\n\n    // find solution\n\n    for (let vertex in this.vertexs) {\n      let aux = this.memoization[this.totalNodes - 1][vertex]; // salvando o valor do vertex atual na ultima iteração e salvando em aux\n      if (aux == Number.MAX_SAFE_INTEGER) {\n        // se o ultimo valor do vertex atual na ultima iteração for infinito, significa que nao existe aresta para o nó destino\n        //partin do de vertex, entao é adicionado null.\n        this.solutionSet[vertex] = null;\n        continue;\n      }\n      for (let i = this.totalNodes - 2; i >= 0; --i) {\n        // verificando até qual indice o valor permanece o mesmo para sabermos o menor numero de arestas\n        if (this.memoization[i][vertex] == aux) {\n          this.solutionSet[vertex] = i;\n        }\n      }\n    }\n\n    // find path\n    let aux = origin;\n    if (aux == destiny) {\n      console.log(\"Destino e origem iguais\");\n      return -2;\n    }\n    if (!this.sucessor.hasOwnProperty(origin)) {\n      console.log(\"Não existe um caminho entre \", origin, \" e \", destiny);\n      return -1;\n    }\n    let path = [];\n    while (aux != destiny) {\n      // procurando o caminho do nó origem até o destino;\n      path.push(aux);\n\n      let last = this.sucessor[aux];\n\n      aux = last;\n    }\n    path.push(aux);\n    let response = {\n      path: path,\n      cost: this.memoization[this.solutionSet[origin]][origin],\n    };\n    console.log(response);\n\n    return response;\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form } from \"@rocketseat/unform\";\nimport Graph from \"react-graph-vis\";\nimport {\n  Container,\n  Header,\n  Body,\n  Menu,\n  Text,\n  Bottom,\n  SubText,\n  Conditional,\n  FormContainer,\n  Input,\n  SubTextInstructions,\n} from \"./styles\";\nimport options from \"../../jsons/options.json\";\nimport GraphStructure from \"../../functions/graph\";\n\nfunction Home() {\n  const [renderizedGraph, setRenderizedGraph] = useState(null);\n  const [totalNodes, setTotalNodes] = useState(0);\n  const [destinyInput, setDestinyInput] = useState(\"\");\n  const [vertexs, setVertexs] = useState({});\n  const [clickedVertex, setClickedVertex] = useState(\"\");\n  const [path, setPath] = useState([]);\n  const [cost, setCost] = useState(0);\n  const [example, setExample] = useState(0);\n  const [applied, setApplied] = useState(false);\n  const graph = new GraphStructure();\n  const events = {\n    // função que captura os nós selecionados pelo usuario\n    select: function (event) {\n      var { nodes, edges } = event;\n\n      // adiciona os nos e arestas selecionados no state\n      setClickedVertex(nodes[0]);\n      console.log(totalNodes);\n      graph.vertexs = vertexs;\n      graph.totalNodes = totalNodes;\n      console.log(nodes[0]);\n      console.log(destinyInput);\n      if (destinyInput && nodes[0]) {\n        let response = graph.shortestPath(nodes[0], destinyInput);\n        if (response == -1) {\n          alert(\"Não existe caminho!\");\n        } else if (response == -2) {\n          alert(\"Origem e destino iguais! Custo = 0\");\n        } else {\n          setPath(response.path);\n          setCost(response.cost);\n          drawPath(response.path);\n        }\n      }\n    },\n  };\n\n  function ApplyButton() {\n    setApplied(true);\n    // setRenderizedGraph(null);\n    // setTimeout(() => {\n    //   setRenderizedGraph(renderized);\n    //   console.log(renderized);\n    // }, 50);\n    if (!vertexs.hasOwnProperty(destinyInput)) {\n      alert(\"Vértice não existente!\");\n      setApplied(false);\n      return;\n    }\n    let renderized = renderGraph(example);\n\n    try {\n      let new_renderized = renderized;\n      let index;\n      let currentNode = destinyInput;\n      for (let i = 0; i < new_renderized.nodes.length; ++i)\n        if (new_renderized.nodes[i].id === currentNode) index = i;\n      console.log(index);\n      console.log(new_renderized.nodes[index]);\n      new_renderized.nodes[index][\"color\"] = \"#6e3f6a\";\n      console.log(new_renderized);\n      setRenderizedGraph(null);\n      setTimeout(() => {\n        setRenderizedGraph(new_renderized);\n      }, 50);\n    } catch (e) {}\n  }\n\n  function renderGraph(id) {\n    console.log(\"________________________\");\n    if (id == 0) {\n      console.log(\"criar grafo aleatorio\");\n    } else if (id == 1) {\n      let response = graph.exampleOne();\n      setTotalNodes(response.total);\n      console.log(response.total);\n      setVertexs(response.vertexs);\n      setExample(1);\n      console.log(response.dict);\n      setTimeout(() => {\n        setRenderizedGraph(null);\n        setRenderizedGraph(response.dict);\n      }, 50);\n      return response.dict;\n    } else if (id == 2) {\n      let response = graph.exampleTwo();\n      setTotalNodes(response.total);\n      console.log(response.total);\n      setVertexs(response.vertexs);\n      setExample(2);\n      setRenderizedGraph(null);\n      setTimeout(() => {\n        setRenderizedGraph(response.dict);\n      }, 50);\n      return response.dict;\n    }\n  }\n\n  function drawPath(path) {\n    console.log(totalNodes);\n    // setTimeout(() => {\n    //   ApplyButton();\n    // }, 200);\n    graph.vertexs = vertexs;\n    graph.totalNodes = totalNodes;\n    let renderized = renderGraph(example);\n    console.log(renderized.nodes[0]);\n    for (let i = 0; i < path.length; ++i) {\n      for (let j = 0; j < totalNodes; ++j) {\n        if (renderized.nodes[j].id == path[i]) {\n          console.log(renderized.nodes[j].id);\n          if (i == 0) {\n            renderized.nodes[j][\"color\"] = \"#91c095\";\n          } else if (i == path.length - 1) {\n            renderized.nodes[j][\"color\"] = \"#6e3f6a\";\n          } else {\n            renderized.nodes[j][\"color\"] = \"#8b0000\";\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      for (let edge in renderized.edges) {\n        if (\n          renderized.edges[edge].from == path[i] &&\n          renderized.edges[edge].to == path[i + 1]\n        ) {\n          renderized.edges[edge][\"color\"] = \"#8b0000\";\n        }\n      }\n    }\n    console.log(renderized);\n    console.log(path);\n    setRenderizedGraph(null);\n    setTimeout(() => {\n      setRenderizedGraph(renderized);\n    }, 150);\n  }\n\n  return (\n    <Container>\n      <Header>\n        <Text>Menor Caminho</Text>\n      </Header>\n      <Body>\n        <Menu>\n          <Text>Menu</Text>\n          <button id=\"0\" onClick={(id) => renderGraph(id.target.id)}>\n            Grafo Aleatório\n          </button>\n          <button id=\"1\" onClick={(id) => renderGraph(id.target.id)}>\n            Exemplo 1 - Aula\n          </button>\n\n          <button id=\"2\" onClick={(id) => renderGraph(id.target.id)}>\n            Exemplo 2 - Aula\n          </button>\n\n          {renderizedGraph ? (\n            <Conditional>\n              <FormContainer>\n                {applied ? (\n                  <SubTextInstructions>\n                    Clique em algum nó para saber o menor caminho\n                  </SubTextInstructions>\n                ) : (\n                  <SubTextInstructions>\n                    Agora selecione um nó (v ∈ G) ⇊\n                  </SubTextInstructions>\n                )}\n                <Form>\n                  <Input\n                    value={destinyInput}\n                    required\n                    onChange={(destinyInput) =>\n                      setDestinyInput(destinyInput.target.value)\n                    }\n                    placeholder=\"Vértice Destino\"\n                  />\n                </Form>\n                <button type=\"submit\" onClick={ApplyButton}>\n                  Aplicar\n                </button>\n              </FormContainer>\n            </Conditional>\n          ) : (\n            <SubTextInstructions>\n              Primeiro renderize um dos grafos acima ⇈\n            </SubTextInstructions>\n          )}\n        </Menu>\n        {renderizedGraph ? (\n          <Graph graph={renderizedGraph} options={options} events={events} />\n        ) : null}\n      </Body>\n      <Bottom>\n        <SubText>Número de Vértices: {totalNodes}</SubText>\n        <SubText>Menor Custo Total: {cost}</SubText>\n      </Bottom>\n    </Container>\n  );\n}\nexport default Home;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/Final_Shortest/\" exact component={Home} />\n    </Switch>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\n\nexport default createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\n*{\n  margin:0;\n  padding:0;\n  outline:0;\n  box-sizing:border-box;\n}\n*:focus{\n  outline:0;\n}\nhtml ,body, #root{\n  height:100%;\n}\nbody{\n  -webkit-font-smoothing:antialiased;\n}\nbody, -moz-user-input, button{\n  font :14px 'Roboto',sans-serif;\n}\na{\n  text-decoration:none;\n}\nul{list-style:none;}\nbutton{\n  cursor:pointer;\n}\n`;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport GlobalStyle from \"./styles/global\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"shortest\">\n      <Routes />\n      <GlobalStyle />\n    </BrowserRouter>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}