{"version":3,"sources":["pages/Home/styles.js","pages/Home/index.js","functions/graph.js","routes.js","styles/global.js","App.js","index.js"],"names":["Container","styled","div","Header","Body","Menu","darken","Text","p","SubText","SubTextInstructions","Conditional","Bottom","GraphContainer","FormContainer","Input","input","graph","this","vertexs","memoization","totalNodes","sucessor","solutionSet","id","vertex","neighbors","degree","origin","destiny","weight","type","new_edge","new_inverse_edge","i","Number","MAX_SAFE_INTEGER","edge","aux","console","log","hasOwnProperty","path","push","response","cost","Home","useState","renderizedGraph","setRenderizedGraph","setTotalNodes","destinyInput","setDestinyInput","setClickedVertex","setPath","setCost","example","setExample","applied","setApplied","events","select","event","nodes","edges","length","getVertex","shortestPath","findSolution","alert","ApplyButton","renderized","j","from","to","setTimeout","drawPath","index","new_renderized","renderGraph","currentNode","time","renderize","converter","new_node","label","title","toString","color","is_user","clear","exampleOne","addVertex","addEdge","getTotalVertex","exampleTwo","onClick","target","value","required","onChange","placeholder","options","Routes","exact","component","createGlobalStyle","App","basename","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fa7a425.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { darken } from \"polished\";\nexport const Container = styled.div`\n  height: 100%;\n  background: linear-gradient(-90deg, #c9c9c9, #000);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const Header = styled.div`\n  height: 10%;\n  width: 100%;\n  flex-direction: column;\n  vertical-align: middle;\n  background: #000;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n`;\nexport const Body = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n`;\nexport const Menu = styled.div`\n  height: 100%;\n  width: 20%;\n  display: flex;\n  background: #000;\n  align-items: center;\n  flex-direction: column;\n  button {\n    margin: 15px;\n    padding: 10px;\n    height: 12%;\n    width: 60%;\n    background: #FFF;\n    font-weight: bold;\n    color: #000;\n    border: 0;\n    border-radius: 4px;\n    font-size: 16px;\n    transition: background 0.2s;\n    &:hover {\n      background: ${darken(0.03, \"#3b9eff\")};\n    }\n  }\n  textAlign = center;\n`;\nexport const Text = styled.p`\n  font-size: 30px;\n  color: #fff;\n  text-align: center;\n`;\nexport const SubText = styled.p`\n  font-size: 30px;\n  color: #ff0;\n  text-align: center;\n`;\nexport const SubTextInstructions = styled.p`\n  margin-top: 15px;\n  font-size: 20px;\n  color: #ff0000;\n  text-align: center;\n`;\nexport const Conditional = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Bottom = styled.div`\n  height: 10%;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: center;\n  background: #000;\n  display: flex;\n`;\n\nexport const GraphContainer = styled.div`\n  height: 100%;\n  width: 80%;\n  display: flex;\n`;\n\nexport const FormContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  form {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n    button {\n      margin: 15px;\n      padding: 10px;\n      height: 12%;\n      width: 60%;\n      background: linear-gradient(-90deg, #fff, #000);\n      font-weight: bold;\n      color: #fff;\n      border: 0;\n      border-radius: 4px;\n      font-size: 16px;\n      transition: background 0.2s;\n      &:hover {\n        background: ${darken(0.03, \"#3b9eff\")};\n      }\n    }\n`;\n\nexport const Input = styled.input`\n  background: rgba(0, 0, 0, 0.1);\n  border: 1;\n  border-color: #fff;\n  border-radius: 4px;\n  height: 35px;\n  padding: 0 15px;\n  color: #fff;\n  margin: 0 0 10px;\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.7);\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { Form } from \"@rocketseat/unform\";\nimport Graph from \"react-graph-vis\";\nimport {\n  Container,\n  Header,\n  Body,\n  Menu,\n  Text,\n  Bottom,\n  SubText,\n  Conditional,\n  FormContainer,\n  Input,\n  SubTextInstructions,\n  GraphContainer,\n} from \"./styles\";\nimport options from \"../../jsons/options.json\";\nimport exampleOne from \"../../jsons/example1.json\";\nimport exampleTwo from \"../../jsons/example2.json\";\nimport GraphStructure from \"../../functions/graph\";\n\nconst graph = new GraphStructure();\nfunction Home() {\n  const [renderizedGraph, setRenderizedGraph] = useState(null);\n  const [totalNodes, setTotalNodes] = useState(0);\n  const [destinyInput, setDestinyInput] = useState(\"\");\n  const [clickedVertex, setClickedVertex] = useState(\"\");\n  const [path, setPath] = useState([]);\n  const [cost, setCost] = useState(0);\n  const [example, setExample] = useState(0);\n  const [applied, setApplied] = useState(false);\n  const [lastValid, setLastValid] = useState(\"\");\n\n  const events = {\n    // função que captura os nós selecionados pelo usuario\n    select: function (event) {\n      var { nodes, edges } = event;\n\n      // se nao tiver vertice selecionado ou o input vazio, retorna\n      if (\n        nodes.length == 0 ||\n        destinyInput == \"\" ||\n        !graph.getVertex().hasOwnProperty(destinyInput)\n      ) {\n        console.log(nodes);\n        return;\n      }\n      // alert(\"test\");\n      if (destinyInput && nodes[0]) {\n        graph.shortestPath(destinyInput); // acha todas as soluções pro nó passado\n        let response = graph.findSolution(nodes[0], destinyInput);\n        if (response == -1) {\n          alert(\"Não existe caminho!\");\n        } else if (response == -2) {\n          alert(\"Origem e destino iguais! Custo = 0\");\n        } else {\n          setClickedVertex(nodes[0]);\n          ApplyButton();\n          setPath(response.path);\n          setCost(response.cost);\n          drawPath(response.path);\n        }\n      }\n    },\n  };\n  function renderize(graph, time) {\n    setRenderizedGraph(null);\n    setTimeout(() => {\n      setRenderizedGraph(graph);\n    }, time);\n  }\n\n  function ApplyButton() {\n    if (destinyInput == \"\") {\n      alert(\"Insira um vértice no campo 'Vértice Destino'\");\n      return;\n    }\n    setApplied(true);\n    if (!graph.getVertex().hasOwnProperty(destinyInput)) {\n      let response = \"Vertice '\" + destinyInput + \"' não existente!\";\n      alert(response);\n      setApplied(false);\n      setDestinyInput(\"\");\n      return;\n    }\n\n    let new_renderized = renderGraph(example, 0);\n    let index;\n    let currentNode = destinyInput;\n\n    // achando o nó escolhido pelo usuario e mudando a cor dele no grafo\n    for (let i = 0; i < new_renderized.nodes.length; ++i) {\n      if (new_renderized.nodes[i].id === currentNode) {\n        index = i;\n      }\n    }\n    new_renderized.nodes[index][\"color\"] = \"#91c095\";\n\n    // renderizando com a cor alterada\n    renderize(new_renderized, 25);\n    return new_renderized;\n  }\n  function converter() {\n    let nodes = [];\n    let edges = [];\n\n    for (let vertex in graph.vertexs) {\n      let new_node = {\n        id: vertex,\n        label: vertex,\n        title: \"node 1\",\n      };\n      nodes.push(new_node);\n\n      for (let edge in graph.vertexs[vertex].neighbors) {\n        let new_edge = {\n          from: graph.vertexs[vertex].neighbors[edge].origin,\n          to: graph.vertexs[vertex].neighbors[edge].destiny,\n          label: graph.vertexs[vertex].neighbors[edge].weight.toString(),\n          color: \"#FF0\",\n        };\n        edges.push(new_edge);\n      }\n    }\n\n    return {\n      nodes: nodes,\n      edges: edges,\n    };\n  }\n\n  function renderGraph(id, is_user) {\n    if (is_user) {\n      setApplied(false);\n      setDestinyInput(\"\");\n    }\n    if (id == 0) {\n      console.log(\"criar grafo aleatorio\");\n    } else if (id == 1) {\n      graph.clear(); // zerando a estrutura\n\n      // carregando o grafo de um arquivo externo\n      for (let vertex of exampleOne.nodes) {\n        graph.addVertex(vertex.id);\n      }\n      for (let edge of exampleOne.edges) {\n        graph.addEdge(edge.origin, edge.destiny, edge.weight);\n      }\n\n      // renderizando na tela\n      let new_renderized = converter();\n\n      setRenderizedGraph(null);\n      setExample(id);\n      setTotalNodes(graph.getTotalVertex());\n      setTimeout(() => {\n        setRenderizedGraph(new_renderized);\n      }, 50);\n\n      return new_renderized;\n    } else if (id == 2) {\n      graph.clear();\n      for (let vertex of exampleTwo.nodes) {\n        graph.addVertex(vertex.id);\n      }\n      for (let edge of exampleTwo.edges) {\n        graph.addEdge(edge.origin, edge.destiny, edge.weight);\n      }\n\n      // renderizando na tela\n      let new_renderized = converter();\n\n      setRenderizedGraph(null);\n      setExample(id);\n      setTotalNodes(graph.getTotalVertex());\n      setTimeout(() => {\n        setRenderizedGraph(new_renderized);\n      }, 50);\n      return new_renderized;\n    }\n  }\n\n  function drawPath(path) {\n    let renderized = ApplyButton(example);\n    for (let i = 0; i < path.length; ++i) {\n      for (let j = 0; j < totalNodes; ++j) {\n        if (renderized.nodes[j].id == path[i]) {\n          if (i == 0) {\n            renderized.nodes[j][\"color\"] = \"#a4609e\";\n          } else if (i == path.length - 1) {\n            renderized.nodes[j][\"color\"] = \"#91c095\";\n          } else {\n            renderized.nodes[j][\"color\"] = \"#a4609e\";\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      for (let edge in renderized.edges) {\n        if (\n          renderized.edges[edge].from == path[i] &&\n          renderized.edges[edge].to == path[i + 1]\n        ) {\n          renderized.edges[edge][\"color\"] = \"#a4609e\";\n        }\n      }\n    }\n    console.log(path);\n    setRenderizedGraph(null);\n    setTimeout(() => {\n      setRenderizedGraph(renderized);\n    }, 150);\n  }\n\n  return (\n    <Container>\n      <Header>\n        <Text>Menor Caminho</Text>\n      </Header>\n      <Body>\n        <Menu>\n          <Text>Menu</Text>\n          <button id=\"0\" onClick={(id) => renderGraph(id.target.id, 1)}>\n            Grafo Aleatório\n          </button>\n          <button id=\"1\" onClick={(id) => renderGraph(id.target.id, 1)}>\n            Exemplo 1 - Aula\n          </button>\n\n          <button id=\"2\" onClick={(id) => renderGraph(id.target.id, 1)}>\n            Exemplo 2 - Aula\n          </button>\n\n          {renderizedGraph ? (\n            <Conditional>\n              <FormContainer>\n                {applied ? (\n                  <SubTextInstructions>\n                    Clique em algum vértice, do grafo ao lado, para saber o\n                    menor caminho\n                  </SubTextInstructions>\n                ) : (\n                  <SubTextInstructions>\n                    Abaixo selecione um vértice de destino\n                  </SubTextInstructions>\n                )}\n                <Form>\n                  <Input\n                    value={destinyInput}\n                    required\n                    onChange={(destinyInput) =>\n                      setDestinyInput(destinyInput.target.value)\n                    }\n                    placeholder=\"Vértice Destino\"\n                  />\n                </Form>\n                <button type=\"submit\" onClick={ApplyButton}>\n                  Aplicar\n                </button>\n              </FormContainer>\n            </Conditional>\n          ) : (\n            <SubTextInstructions>\n              Primeiro renderize um dos grafos acima\n            </SubTextInstructions>\n          )}\n        </Menu>\n        {renderizedGraph ? (\n          <GraphContainer>\n            <Graph graph={renderizedGraph} options={options} events={events} />\n          </GraphContainer>\n        ) : null}\n      </Body>\n      <Bottom>\n        <SubText>Número de Vértices: {totalNodes}</SubText>\n        <SubText>Menor Custo Total: {cost}</SubText>\n      </Bottom>\n    </Container>\n  );\n}\nexport default Home;\n","export default class Graph {\n  constructor() {\n    this.vertexs = {}; // implementado assim para poder achar qualquer nó em O(1) (passando o id)\n    this.memoization = {};\n    this.totalNodes = 0;\n    this.sucessor = {};\n    this.solutionSet = {};\n  }\n\n  // adição de um vertice 'id' no grafo\n  addVertex(id) {\n    let vertex = {\n      id: id,\n      neighbors: {}, // implementado assim para poder achar qualquer nó vizinho em O(1) (passando o id)\n      degree: 0,\n    };\n\n    this.vertexs[id] = vertex;\n    this.totalNodes++;\n  }\n\n  // OBS: parametro 'type' opcional (se nao for passado ele considera uma aresta orientada (a->c))\n  // se for passado o valor 'undirected' em 'type', ele alem de fazer a aresta (a->c) ele faz a aresta (c->a)\n  addEdge(origin, destiny, weight, type) {\n    let new_edge = {\n      origin: origin,\n      destiny: destiny,\n      weight: weight,\n    };\n    this.vertexs[origin][\"neighbors\"][destiny] = new_edge;\n    this.vertexs[origin][\"degree\"]++;\n\n    if (type === \"undirected\") {\n      let new_inverse_edge = {\n        origin: destiny,\n        destiny: origin,\n        weight: weight,\n      };\n\n      this.vertexs[destiny][\"neighbors\"][origin] = new_inverse_edge;\n      this.vertexs[destiny][\"degree\"]++;\n    }\n  }\n\n  getVertex() {\n    return this.vertexs;\n  }\n\n  getTotalVertex() {\n    return this.totalNodes;\n  }\n\n  clear() {\n    this.vertexs = {};\n    this.memoization = {};\n    this.totalNodes = 0;\n    this.sucessor = {};\n    this.solutionSet = {};\n  }\n\n  shortestPath(destiny) {\n    // iniciar com infinito e zerar somente a coluna do nó destiny\n\n    for (let i = 0; i < this.totalNodes; ++i) {\n      this.memoization[i] = {}; // criando objeto para cada iteração\n      for (let vertex in this.vertexs) {\n        this.memoization[i][vertex] = Number.MAX_SAFE_INTEGER; // recebendo valor \"infinito\"\n      }\n      this.memoization[i][destiny] = 0; // zerando a coluna do nó procurado, pois para chegar a ele precisamos de 0 arestas.\n    }\n\n    // loops para verificar os menores caminhos (logica do algoritmo)\n\n    // ----------------------------------------------------------- //\n    for (let i = 1; i <= this.totalNodes - 1; ++i) {\n      for (let vertex in this.vertexs) {\n        this.memoization[i][vertex] = this.memoization[i - 1][vertex]; // o valor atual recebe o mesmo valor da coluna acima\n        // para cada vizinho do nó\n        for (let edge in this.vertexs[vertex].neighbors) {\n          // o if abaixo verifica se os 2 valores sao infinitos, se sim, vai pra proxima iteração.\n          if (\n            this.memoization[i][vertex] === Number.MAX_SAFE_INTEGER &&\n            this.memoization[i - 1][edge] === Number.MAX_SAFE_INTEGER\n          ) {\n            continue;\n          }\n          // o if abaixo verifica se o valor atual e maior que o valor do vizinho na linha de cima + o peso desse vizinho\n          if (\n            this.memoization[i][vertex] >\n            this.memoization[i - 1][edge] +\n              this.vertexs[vertex].neighbors[edge].weight\n          ) {\n            //se sim faz o swap, e adiciona o sucessor.\n            this.memoization[i][vertex] =\n              this.memoization[i - 1][edge] +\n              this.vertexs[vertex].neighbors[edge].weight;\n            this.sucessor[vertex] = edge;\n          }\n        }\n      }\n    }\n    // ----------------------------------------------------------- //\n  }\n  // find solution\n  findSolution(origin, destiny) {\n    for (let vertex in this.vertexs) {\n      let aux = this.memoization[this.totalNodes - 1][vertex]; // salvando o valor do vertex atual na ultima iteração e salvando em aux\n      if (aux == Number.MAX_SAFE_INTEGER) {\n        // se o ultimo valor do vertex atual na ultima iteração for infinito, significa que nao existe aresta para o nó destino\n        //partin do de vertex, entao é adicionado null.\n        this.solutionSet[vertex] = null;\n        continue;\n      }\n      for (let i = this.totalNodes - 2; i >= 0; --i) {\n        // verificando até qual indice o valor permanece o mesmo para sabermos o menor numero de arestas\n        if (this.memoization[i][vertex] == aux) {\n          this.solutionSet[vertex] = i;\n        }\n      }\n    }\n\n    // find path\n    let aux = origin;\n    if (aux == destiny) {\n      console.log(\"Destino e origem iguais\");\n      return -2;\n    }\n    if (!this.sucessor.hasOwnProperty(origin)) {\n      console.log(\"Não existe um caminho entre \", origin, \" e \", destiny);\n      return -1;\n    }\n    let path = [];\n    while (aux != destiny) {\n      // procurando o caminho do nó origem até o destino;\n      path.push(aux);\n\n      let last = this.sucessor[aux];\n\n      aux = last;\n    }\n    path.push(aux);\n    let response = {\n      path: path,\n      cost: this.memoization[this.solutionSet[origin]][origin],\n    };\n\n    console.log(this.memoization);\n    console.log(this.solutionSet);\n    return response;\n  }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/Final_Shortest/\" exact component={Home} />\n    </Switch>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\n\nexport default createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\n*{\n  margin:0;\n  padding:0;\n  outline:0;\n  box-sizing:border-box;\n}\n*:focus{\n  outline:0;\n}\nhtml ,body, #root{\n  height:100%;\n}\nbody{\n  -webkit-font-smoothing:antialiased;\n}\nbody, -moz-user-input, button{\n  font :14px 'Roboto',sans-serif;\n}\na{\n  text-decoration:none;\n}\nul{list-style:none;}\nbutton{\n  cursor:pointer;\n}\n`;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport GlobalStyle from \"./styles/global\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"shortest\">\n      <Routes />\n      <GlobalStyle />\n    </BrowserRouter>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}